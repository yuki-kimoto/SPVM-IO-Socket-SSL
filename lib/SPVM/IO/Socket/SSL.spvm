# Copyright (c) 2024 Yuki Kimoto
# MIT License

class IO::Socket::SSL extends IO::Socket::IP {
  version "0.003";
  
  use IO::Socket::INET;
  use Net::SSLeay;
  use Net::SSLeay::SSL_CTX;
  use Net::SSLeay::SSL_METHOD;
  use Net::SSLeay::Constant as SSL;
  use Net::SSLeay::ERR;
  use Net::SSLeay::BIO;
  use Net::SSLeay::PEM;
  use StringBuffer;
  use Mozilla::CA;
  use Go;
  use Net::SSLeay::X509;
  use Net::SSLeay::EVP;
  use Fn;
  use Net::SSLeay::Callback::Msg;
  
  has ref_x509s_list : List of Net::SSLeay::X509;
  
  has ssl : ro Net::SSLeay;
  
  has SSL_version : string;
  
  has SSL_verify_mode : int;
  
  has SSL_verify_mode_specified : int;
  
  has SSL_hostname : string;
  
  has SSL_cipher_list : string;
  
  has SSL_ciphersuites : string;
  
  has SSL_check_crl : int;
  
  has SSL_crl_file : string;
  
  has SSL_server : int;
  
  has SSL_server_specified : int;
  
  has SSL_npn_protocols : string[];
  
  has SSL_alpn_protocols : string[];
  
  has SSL_ticket_keycb : Net::SSLeay::Callback::TlsextTicketKey;
  
  has SSL_startHandshake : int;
  
  has SSL_honor_cipher_order : int;
  
  has SSL_honor_cipher_order_specified : int;
  
  # Class Methods
  static method new : IO::Socket::SSL ($options : object[] = undef) {
    
    my $self = new IO::Socket::SSL;
    
    $self->init($options);
    
    $self->configure;
    
    return $self;
  }
  
  # Instance Methods
  protected method option_names : string[] () {
    
    my $option_names = Array->merge_string(
      $self->SUPER::option_names,
      [
        "SSL_version", 
        "SSL_verify_mode",
        "SSL_hostname",
        "SSL_cipher_list",
        "SSL_ciphersuites",
        "SSL_check_crl",
        "SSL_crl_file",
        "SSL_server",
        "SSL_npn_protocols",
        "SSL_alpn_protocols",
        "SSL_ticket_keycb",
        "SSL_startHandshake",
        "SSL_honor_cipher_order",
      ],
    );
    
    return $option_names;
  }
  
  protected method init : void ($options : object[] = undef) {
    
    $self->{ref_x509s_list} = List->new(new Net::SSLeay::X509[0]);
    
    my $options_h = Hash->new($options);
    
    $self->SUPER::init($options);
    
    my $SSL_version = $options_h->get_or_default_string("SSL_version", "SSLv23:!TLSv1:!TLSv1_1:!SSLv3:!SSLv2");
    
    $self->{SSL_version} = $SSL_version;
    
    if ($options_h->exists("SSL_verify_mode")) {
      $self->{SSL_verify_mode_specified} = 1;
      
      my $SSL_verify_mode = $options_h->get_int("SSL_verify_mode");
      $self->{SSL_verify_mode} = $SSL_verify_mode;
    }
    
    my $SSL_hostname = $options_h->get_or_default_string("SSL_hostname", undef);
    
    $self->{SSL_hostname} = $SSL_hostname;
    
    my $SSL_cipher_list = $options_h->get_or_default_string("SSL_cipher_list", "DEFAULT !EXP !MEDIUM !LOW !eNULL !aNULL !RC4 !DES !MD5 !PSK !SRP");
    
    $self->{SSL_cipher_list} = $SSL_cipher_list;
    
    my $SSL_ciphersuites = $options_h->get_or_default_string("SSL_ciphersuites", undef);
    
    $self->{SSL_ciphersuites} = $SSL_ciphersuites;
    
    my $SSL_check_crl = $options_h->get_or_default_int("SSL_check_crl", 0);
    
    $self->{SSL_check_crl} = $SSL_check_crl;
    
    my $SSL_crl_file = $options_h->get_or_default_string("SSL_crl_file", 0);
    
    $self->{SSL_crl_file} = $SSL_crl_file;
    
    my $SSL_server = $options_h->get_or_default_int("SSL_server", 0);
    
    if ($SSL_server) {
      $self->{SSL_server_specified} = 1;
      
      $self->{SSL_server} = $SSL_server;
    }
    
    my $SSL_npn_protocols = (string[])$options_h->get_or_default("SSL_npn_protocols", undef);
    $self->{SSL_npn_protocols} = $SSL_npn_protocols;
    
    my $SSL_alpn_protocols = (string[])$options_h->get_or_default("SSL_alpn_protocols", undef);
    $self->{SSL_alpn_protocols} = $SSL_alpn_protocols;
    
    my $SSL_ticket_keycb = (Net::SSLeay::Callback::TlsextTicketKey)$options_h->get_or_default("SSL_ticket_keycb", undef);
    $self->{SSL_ticket_keycb} = $SSL_ticket_keycb;
    
    my $SSL_startHandshake = $options_h->get_or_default_int("SSL_startHandshake", 1);
    $self->{SSL_startHandshake} = $SSL_startHandshake;
    
    if ($options_h->exists("SSL_honor_cipher_order")) {
      $self->{SSL_honor_cipher_order_specified} = 1;
      my $SSL_honor_cipher_order = $options_h->get_int("SSL_honor_cipher_order");
      $self->{SSL_honor_cipher_order} = $SSL_honor_cipher_order;
    }
  }
  
  protected method configure : void () {
    
    $self->SUPER::configure;
    
    $self->configure_SSL;
    
    # Client
    my $peer_address = $self->{PeerAddr};
    if ($peer_address) {
      
      my $SSL_startHandshake = $self->{SSL_startHandshake};
      
      if ($SSL_startHandshake) {
        $self->connect_SSL;
      }
    }
  }
  
  protected method configure_SSL : void () {
    
    my $peer_addr = $self->{PeerAddr};
    
    my $listen = $self->{Listen};
    
    my $SSL_server_specified = $self->{SSL_server_specified};
    
    my $SSL_server = 0;
    if ($SSL_server_specified) {
      $SSL_server = $self->{SSL_server};
    }
    else {
      if ($listen > 0) {
        $SSL_server = 1;
      }
    }
    
    my $ssl_method = (Net::SSLeay::SSL_METHOD)undef;
    my $ssl_method_name = (string)undef;
    
    my $SSL_version_option = $self->{SSL_version};
    
    my $SSL_versions = Fn->split(":", $SSL_version_option);
    
    my $ssl_op_no_options = 0;
    for my $SSL_version (@$SSL_versions) {
      
      if ($SSL_version eq "TLS") {
        if ($ssl_method) {
          die "SSL_METHOD is already set to ${ssl_method_name}_method.";
        }
        
        $ssl_method = Net::SSLeay::SSL_METHOD->TLS_method;
        $ssl_method_name = $SSL_version;
      }
      elsif ($SSL_version eq "SSLv23") {
        if ($ssl_method) {
          die "SSL_METHOD is already set to ${ssl_method_name}_method.";
        }
        
        $ssl_method = Net::SSLeay::SSL_METHOD->SSLv23_method;
        $ssl_method_name = $SSL_version;
      }
      elsif ($SSL_version eq "!SSLv2") {
        $ssl_op_no_options |= SSL->SSL_OP_NO_SSLv2;
      }
      elsif ($SSL_version eq "!SSLv3") {
        $ssl_op_no_options |= SSL->SSL_OP_NO_SSLv3;
      }
      elsif ($SSL_version eq "!TLSv1") {
        $ssl_op_no_options |= SSL->SSL_OP_NO_TLSv1;
      }
      elsif ($SSL_version eq "!TLSv1_1") {
        $ssl_op_no_options |= SSL->SSL_OP_NO_TLSv1_1;
      }
      elsif ($SSL_version eq "!TLSv1_2") {
        $ssl_op_no_options |= SSL->SSL_OP_NO_TLSv1_2;
      }
      elsif ($SSL_version eq "!TLSv1_3") {
        $ssl_op_no_options |= SSL->SSL_OP_NO_TLSv1_3;
      }
      else {
        die "SSL_option contains an invalid value:$SSL_version.";
      }
    }
    
    unless ($ssl_method) {
      die "SSL_version must contain TLS or SSLv23.";
    }
    
    my $ssl_ctx = Net::SSLeay::SSL_CTX->new($ssl_method);
    
    my $SSL_cipher_list = $self->{SSL_cipher_list};
    
    $ssl_ctx->set_cipher_list($SSL_cipher_list);
    
    my $SSL_ciphersuites = $self->{SSL_ciphersuites};
    
    if ($SSL_ciphersuites) {
      $ssl_ctx->set_ciphersuites($SSL_ciphersuites);
    }
    
    my $SSL_verify_mode = -1;
    if ($self->{SSL_verify_mode_specified}) {
      $SSL_verify_mode = $self->{SSL_verify_mode};
    }
    else {
      if ($SSL_server) {
        $SSL_verify_mode = SSL->SSL_VERIFY_NONE;
      }
      else {
        $SSL_verify_mode = SSL->SSL_VERIFY_PEER;
      }
    }
    $ssl_ctx->set_verify($SSL_verify_mode);
    
    my $ca = Mozilla::CA->SSL_ca;
    
    my $SSL_hostname = $self->{SSL_hostname};
    
    unless ($SSL_hostname) {
      if ($peer_addr) {
        $SSL_hostname = $peer_addr;
      }
    }
    
    my $default_ssl_options = SSL->SSL_OP_ALL | SSL->SSL_OP_SINGLE_DH_USE | SSL->SSL_OP_SINGLE_ECDH_USE;
    
    my $ssl_options = $default_ssl_options;
    
    $ssl_options |= $ssl_op_no_options;
    
    $ssl_ctx->set_default_verify_paths;
    
    my $bio = Net::SSLeay::BIO->new;
    
    $bio->write($ca);
    
    my $x509 = Net::SSLeay::PEM->read_bio_X509($bio);
    
    my $x509_store = $ssl_ctx->get_cert_store;
    
    $x509_store->add_cert($x509);
    
    my $SSL_check_crl = $self->{SSL_check_crl};
    
    my $SSL_crl_file = $self->{SSL_crl_file};
    
    my $default_x509_store_flags = SSL->X509_V_FLAG_TRUSTED_FIRST;
    
    my $x509_store_flags = $default_x509_store_flags;
    if ($SSL_check_crl) {
      $x509_store_flags |= SSL->X509_V_FLAG_CRL_CHECK;
      
      if ($SSL_crl_file) {
        my $bio = Net::SSLeay::BIO->new_file($SSL_crl_file, "r");
        my $crl = Net::SSLeay::PEM->read_bio_X509_CRL($bio);
        my $cert_store = $ssl_ctx->get_cert_store;
        $cert_store->add_crl($crl);
      }
    }
    
    $x509_store->set_flags($x509_store_flags);
    
    my $SSL_npn_protocols = $self->{SSL_npn_protocols};
    if ($SSL_npn_protocols) {
      if ($SSL_server) {
        $ssl_ctx->set_next_protos_advertised_cb_with_protocols($SSL_npn_protocols);
      }
      else {
        $ssl_ctx->set_next_proto_select_cb_with_protocols($SSL_npn_protocols);
      }
    }
    
    my $SSL_alpn_protocols = $self->{SSL_alpn_protocols};
    if ($SSL_alpn_protocols) {
      if ($SSL_server) {
        $ssl_ctx->set_alpn_select_cb_with_protocols($SSL_alpn_protocols);
      } else {
        die "[TODO]";
        # TODO
        # $ssl_ctx->set_alpn_protos($SSL_alpn_protocols);
      }
    }
    
    my $SSL_ticket_keycb = $self->{SSL_ticket_keycb};
    if ($SSL_ticket_keycb) {
      $ssl_ctx->set_tlsext_ticket_key_cb($SSL_ticket_keycb);
    }
    
    my $verify_param = $ssl_ctx->get0_param;
    
    $verify_param->set_hostflags(SSL->X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS);
    
    $verify_param->set1_host($peer_addr);
    
    my $SSL_honor_cipher_order = 0;
    if ($self->{SSL_honor_cipher_order_specified}) {
      $SSL_honor_cipher_order = $self->{SSL_honor_cipher_order};
    }
    else {
      if ($self->{SSL_server}) {
        $SSL_honor_cipher_order = 1;
      }
    }
    # if ($SSL_honor_cipher_order) {
      $ssl_options |= SSL->SSL_OP_CIPHER_SERVER_PREFERENCE;
    # }
    
    $ssl_ctx->set_options($ssl_options);
    
    my $ssl = Net::SSLeay->new($ssl_ctx);
    
    my $socket_fileno = $self->fileno;
    
    $ssl->set_fd($socket_fileno);
    
    if (!$SSL_server && $SSL_hostname && $SSL_hostname ne "") {
      $ssl->set_tlsext_host_name($SSL_hostname);
    }
    
    $self->{ssl} = $ssl;
  }
  
  method connect_SSL : void () {
    
    my $ssl = $self->{ssl};
    
    my $timeout = $self->{Timeout};
    
    my $fd = $self->{FD};
    
    while (1) {
      eval { $ssl->connect; }
      
      if ($@) {
        my $again = Sys::Socket::Errno->is_connect_again(Sys::Socket::Errno->errno);
        
        if ($again) {
          Go->gosched_io_write($fd, $timeout);
          next;
        }
        else {
          die $@;
        }
      }
      else {
        last;
      }
    }
  }
  
  method accept_SSL : void () {
    
    my $ssl = $self->{ssl};
    
    my $fd = $self->{FD};
    
    my $timeout = $self->{Timeout};
    
    while (1) {
      eval { $ssl->accept; }
      
      if ($@) {
        my $again = Sys::Socket::Errno->is_accept_again(Sys::Socket::Errno->errno);
        
        if ($again) {
          Go->gosched_io_read($fd, $timeout);
          next;
        }
        else {
          die $@;
        }
      }
      else {
        last;
      }
    }
  }
  
  method accept : IO::Socket::SSL ($peer_ref : Sys::Socket::Sockaddr[] = undef) {
    my $client = (IO::Socket::SSL)$self->SUPER::accept($peer_ref);
    
    my $SSL_startHandshake = $self->{SSL_startHandshake};
    
    if ($SSL_startHandshake) {
      $self->accept_SSL;
    }
    
    return $client;
  }
  
  method read : int ($buffer : mutable string, $length : int = -1, $offset : int = 0) {
    
    my $ssl = $self->{ssl};
    
    my $fd = $self->{FD};
    
    my $timeout = $self->{Timeout};
    
    my $read_length = -1;
    while (1) {
      eval { $read_length = $ssl->read($buffer, $length, $offset); }
      
      if ($@) {
        my $again = Sys::Socket::Errno->is_read_again(Sys::Socket::Errno->errno);
        
        if ($again) {
          Go->gosched_io_read($fd, $timeout);
          next;
        }
        else {
          die $@;
        }
      }
      else {
        last;
      }
    }
    
    return $read_length;
  }
  
  method write : int ($buffer : string, $length : int = -1, $offset : int = 0) {
    
    my $ssl = $self->{ssl};
    
    my $fd = $self->{FD};
    
    my $timeout = $self->{Timeout};
    
    my $write_length = -1;
    while (1) {
      
      eval { $write_length = $ssl->write($buffer, $length, $offset); }
      
      if ($@) {
        my $again = Sys::Socket::Errno->is_write_again(Sys::Socket::Errno->errno);
        
        if ($again) {
          Go->gosched_io_write($fd, $timeout);
          next;
        }
        else {
          die $@;
        }
      }
      else {
        last;
      }
    }
    
    return $write_length;
  }
  
  method close : void () {
    
    my $ssl = $self->{ssl};
    
    $ssl->shutdown;
    
    $self->SUPER::close;
    
  }
  
  method stat : Sys::IO::Stat () {
    die "This method is not allowed in IO::Scoekt::SSL.";
  }
  
  method send : int ($buffer : string, $flags : int = 0, $length : int = -1, $offset : int = 0) {
    die "This method is not allowed in IO::Scoekt::SSL.";
  }
  
  method sendto : int ($buffer : string, $flags : int, $to : Sys::Socket::Sockaddr, $length : int = -1, $offset : int = 0) {
    die "This method is not allowed in IO::Scoekt::SSL.";
  }
  
  method recv : int ($buffer : mutable string, $length : int = -1, $flags : int = 0, $offset : int = 0) {
    die "This method is not allowed in IO::Scoekt::SSL.";
  }
  
  method recvfrom : int ($buffer : mutable string, $length : int, $flags : int, $from_ref : Sys::Socket::Sockaddr[], $offset : int = 0) {
    die "This method is not allowed in IO::Scoekt::SSL.";
  }
  
  method dump_peer_certificate : string () {
    
    my $ssl = $self->{ssl};
    
    my $dump = $ssl->P_dump_peer_certificate;
    
    return $dump;
  }
  
  method next_proto_negotiated : string () {
    
    my $ssl = $self->{ssl};
    
    my $protocol_ref = [(string)undef];
    my $protocol_length = 0;
    
    $ssl->get0_next_proto_negotiated($protocol_ref, \$protocol_length);
    
    my $protocol = (mutable string)$protocol_ref->[0];
    
    Fn->shorten($protocol, $protocol_length);
    
    return $protocol;
  }
  
  method alpn_selected : string () {
    
    my $ssl = $self->{ssl};
    
    my $protocol_ref = [(string)undef];
    my $protocol_length = 0;
    
    $ssl->get0_alpn_selected($protocol_ref, \$protocol_length);
    
    my $protocol = (mutable string)$protocol_ref->[0];
    
    Fn->shorten($protocol, $protocol_length);
    
    return $protocol;
  }
  
  method get_session_reused : int () {
    
    my $ssl = $self->{ssl};
    
    my $reused = $ssl->session_reused;
    
    return $reused;
  }
  
  method get_sslversion : string () {
    
    my $ssl = $self->{ssl};
    
    my $version = $self->get_sslversion_int;
    
    my $version_string = (string)undef;
    if ($version == 0x0304) {
      $version_string = "TLSv1_3";
    }
    elsif ($version == 0x0303) {
      $version_string = "TLSv1_2";
    }
    elsif ($version == 0x0302) {
      $version_string = "TLSv1_1";
    }
    elsif ($version == 0x0301) {
      $version_string = "TLSv1";
    }
    elsif ($version == 0x0300) {
      $version_string = "SSLv3";
    }
    elsif ($version == 0x0002) {
      $version_string = "SSLv2";
    }
    elsif ($version == 0xfeff) {
      $version_string = "DTLS1";
    }
    else {
      die "The version number is unknown.";
    }
    
    return $version_string;
  }
  
  method get_sslversion_int : int () {
    
    my $ssl = $self->{ssl};
    
    my $version = $ssl->version;
    
    return $version;
  }
  
  method get_cipher : string ()  {
    
    my $ssl = $self->{ssl};
    
    my $cipher = $ssl->get_cipher;
    
    return $cipher;
  }  
  
  method get_servername : string ()  {
    
    my $ssl = $self->{ssl};
    
    my $servername = $ssl->get_servername(0); # SSL->TLSEXT_NAMETYPE_host_name
    
    return $servername;
  }  
  
  method peer_certificate : Net::SSLeay::X509 () {
    
    my $ssl = $self->{ssl};
    
    # TODO: use SSL_get1_peer_certificate
    my $cert = $ssl->get_peer_certificate;
    $self->{ref_x509s_list}->push($cert);
    
    return $cert;
  }
  
  method peer_certificates : Net::SSLeay::X509[] () {
    
    my $ssl = $self->{ssl};
    
    my $x509_peer = $self->peer_certificate;
    
    my $x509s = (Net::SSLeay::X509[])undef;
    if ($x509_peer) {
      my $x509s_original = $ssl->get_peer_cert_chain;
      
      if ($self->{SSL_server}) {
        $x509s = (Net::SSLeay::X509[])Array->merge_object([$x509_peer], $x509s_original);
      }
      else {
        $x509s = $x509s_original;
      }
    }
    else {
      $x509s = new Net::SSLeay::X509[0];
    }
    
    return $x509s;
  }
  
  method sock_certificate : Net::SSLeay::X509 () {
    
    my $ssl = $self->{ssl};
    
    my $cert = $ssl->get_certificate;
    
    return $cert;
  }
  
  method get_fingerprint_bin : string ($algo : string = undef, $cert : Net::SSLeay::X509 = undef, $key_only : int = 0) {
    
    unless ($cert) {
      $cert = $self->peer_certificate;
    }
    
    unless ($algo) {
      $algo = "sha256";
    }
    
    my $algo_evp = Net::SSLeay::EVP->get_digestbyname($algo);
    
    # TODO: use EVP_MAX_MD_SIZE
    my $fingerprint_bin = (mutable string)new_string_len 64;
    my $fingerprint_bin_length = 0;
    if ($key_only) {
      $fingerprint_bin = $cert->pubkey_digest($algo_evp, $fingerprint_bin, \$fingerprint_bin_length);
    }
    else {
      $fingerprint_bin = $cert->digest($algo_evp, $fingerprint_bin, \$fingerprint_bin_length);
    }
    
    Fn->shorten($fingerprint_bin, $fingerprint_bin_length);
    
    return $fingerprint_bin;
  }
  
  method get_fingerprint : string ($algo : string = undef, $cert : Net::SSLeay::X509 = undef, $key_only : int = 0) {
    
    my $fingerprint_bin = $self->get_fingerprint_bin($algo, $cert, $key_only);
    
    my $fingerprint = "$algo$";
    
    if ($key_only) {
      $fingerprint .= "pub$";
    }
    
    my $fingerprint_ref = (string[])Fn->unpack("H*", $fingerprint);
    
    $fingerprint .= $fingerprint_ref->[0];
    
    return $fingerprint;
  }
  
}
