class TestCase::IO::Socket::SSL {
  use IO::Socket::SSL;
  use Net::SSLeay::Constant as SSL;
  use Fn;
  use FindBin;
  
  our $FILE_DIR : string;
  
  INIT {
    $FILE_DIR = FindBin->Bin . "/file";
  }
  
  static method run_echo_server_accept_once : void ($port : int) {
    
    my $localhost = "127.0.0.1";
    
    my $server_socket = IO::Socket::SSL->new({
      LocalAddr => $localhost,
      LocalPort => $port,
      Listen    => 5,
      ReuseAddr => 1,
      SSL_startHandshake => 0,
      SSL_crl_file => "$FILE_DIR/simple-cert.csr.pem",
      SSL_check_crl => 1,
      SSL_key_file => "$FILE_DIR/simple-cert.key.pem",
    });
    
    my $ssl_ctx = $server_socket->ssl_ctx;
    
    $ssl_ctx->use_certificate_file("$FILE_DIR/simple-cert.cert.pem");
    
    $ssl_ctx->use_certificate_chain_file("$FILE_DIR/simple-cert.certchain.pem");
    
    my $set_tlsext_servername_callback_result = [0];
    $ssl_ctx->set_tlsext_servername_callback([$set_tlsext_servername_callback_result : int[]] method : int ($ssl : Net::SSLeay, $al_ref : int*) {
      
      $set_tlsext_servername_callback_result->[0] = 1;
      
      warn "[Test Output][set_tlsext_servername_callback]\$ssl->get_servername:" . $ssl->get_servername(SSL->TLSEXT_NAMETYPE_host_name);
      
      warn "[Test Output][set_tlsext_servername_callback]\$\$al_ref:$$al_ref";
      
      return 1;
    });
    
    my $protocols = ["spdy/1", "http/1.1"];
    
    $ssl_ctx->set_alpn_select_cb_with_protocols($protocols);
    
    my $accepted_socket = $server_socket->accept;
    
    $accepted_socket->accept_SSL;
    
    my $ssl = $server_socket->ssl;
    
    while (1) {
      
      my $data = (mutable string)new_string_len 1;
      my $read_length = $accepted_socket->read($data);
      
      if ($read_length > 0) {
        if ($data eq "\0") {
          last;
        }
        
        $accepted_socket->write($data);
      }
      else {
        last;
      }
    }
    
  }
  
  static method client_and_server_basic : int ($port : int) {
    
    my $success_ref = [1];
    
    my $wg = Go::Sync::WaitGroup->new;
    
    $wg->add(2);
    
    # Run a echo server
    my $go_server_ref = [0];
    Go->go([$go_server_ref : int[], $wg : Go::Sync::WaitGroup, $port : int] method : void () {
      
      Fn->defer([$wg : Go::Sync::WaitGroup] method : void () {
        $wg->done;
      });
      
      $go_server_ref->[0] = 1;
      
      &run_echo_server_accept_once($port);
    });
    
    # Tests
    my $go_tests_ref = [0];
    Go->go([$go_tests_ref : int[], $wg : Go::Sync::WaitGroup, $success_ref : int[], $port : int] method : void () {
      
      Fn->defer([$wg : Go::Sync::WaitGroup] method : void () {
        $wg->done;
      });
      
      $go_tests_ref->[0] = 1;
      
      {
        my $default_passwd_cb = method : int ($buf : mutable string, $size : int, $rwflag : int) {
          
          my $password = "test";
          my $password_length = length $password;
          
          Fn->memcpy($buf, 0, $password, 0, $password_length);
          
          return $password_length;
        };
        
        my $host = "127.0.0.1";
        my $socket = IO::Socket::SSL->new({
          PeerAddr => $host,
          PeerPort => $port,
          SSL_startHandshake => 0,
          SSL_verify_mode => SSL->SSL_VERIFY_NONE,
          SSL_key_file => "$FILE_DIR/simple-cert.key.enc.pem",
          SSL_passwd_cb => $default_passwd_cb,
        });
        
        my $ssl_ctx = $socket->ssl_ctx;
        
        $ssl_ctx->use_certificate_file("$FILE_DIR/simple-cert.cert.pem");
        
        $ssl_ctx->set_post_handshake_auth(1);
        
        $ssl_ctx->set_alpn_protos_with_protocols(["http/1.1"]);
        
        my $msg_callback_results = new object[10];
        
        my $msg_callback = [$msg_callback_results : object[]]method : void ($write_p : int, $version : int, $content_type : int, $buf : string, $len : int, $ssl : Net::SSLeay) {          
          unless ($msg_callback_results->[0]) {
            warn "[Test Output]\$write_p:$write_p,\$version:$version,\$content_type:$content_type,\$buf:" . dump $buf . ",\$len:$len,\$ssl:" . type_name($ssl);
            
            $msg_callback_results->[0] = $write_p;
            $msg_callback_results->[1] = $version;
            $msg_callback_results->[2] = $content_type;
            $msg_callback_results->[3] = $buf;
            $msg_callback_results->[4] = $len;
            
            my $ssl_hash = Hash->new;
            $ssl_hash->set("ssl", $ssl);
            $ssl_hash->weaken("ssl");
            
            $msg_callback_results->[5] = $ssl_hash;
            
          }
        };
        
        my $host_name = "localhost";
        
        my $verify_param = $ssl_ctx->get0_param;
        
        $verify_param->set1_host($host_name);
        
        $socket->add_before_connect_SSL_cb([$msg_callback : Net::SSLeay::Callback::Msg, $host_name : string] method : void ($socket : IO::Socket::SSL, $ssl : Net::SSLeay) {
          $ssl->set_msg_callback($msg_callback);
          $ssl->set_tlsext_host_name($host_name);
        });
        
        $socket->connect_SSL;
        
        my $ssl = $socket->ssl;
        
        my $version = $ssl->version;
        
        warn "[Test Output][Net::SSLeay#version]$version";
        
        my $version_string = $ssl->get_version;
        
        warn "[Test Output][Net::SSLeay#get_version]$version_string";
        
        $ssl = $socket->ssl;
        
        $ssl->set_msg_callback(undef);
        
        unless ($msg_callback_results->[0]->(int) >= 0) {
          $success_ref->[0] = 0;
        }
        
        unless ($msg_callback_results->[1]->(int) >= 0) {
          $success_ref->[0] = 0;
        }
        
        unless ($msg_callback_results->[2]->(int) > 0) {
          $success_ref->[0] = 0;
        }
        
        unless (length $msg_callback_results->[3]->(string) > 0) {
          $success_ref->[0] = 0;
        }
        
        unless ($msg_callback_results->[4]->(int) > 0) {
          $success_ref->[0] = 0;
        }
        
        unless ($msg_callback_results->[5]->(Hash)->get("ssl") is_type Net::SSLeay) {
          $success_ref->[0] = 0;
        }
        
        my $certificate = $ssl->get_certificate;
        
        my $peer_certificate = $ssl->get_peer_certificate;
        
        unless ($peer_certificate->get_subject_name->oneline eq "/C=PL/O=Net-SSLeay/OU=Test Suite/CN=simple-cert.net-ssleay.example") {
          $success_ref->[0] = 0;
        }
        
        my $peer_cert_chains = $ssl->get_peer_cert_chain;
        
        unless (@$peer_cert_chains == 3) {
          $success_ref->[0] = 0;
        }
        
        unless ($peer_cert_chains->[0]->get_subject_name->oneline eq "/C=PL/O=Net-SSLeay/OU=Test Suite/CN=simple-cert.net-ssleay.example") {
          $success_ref->[0] = 0;
        }
        
        unless ($peer_cert_chains->[1]->get_subject_name->oneline eq "/C=PL/O=Net-SSLeay/OU=Test Suite/CN=Intermediate CA") {
          $success_ref->[0] = 0;
        }
        
        unless ($peer_cert_chains->[2]->get_subject_name->oneline eq "/C=PL/O=Net-SSLeay/OU=Test Suite/CN=Root CA") {
          $success_ref->[0] = 0;
        }
        
        my $dump_peer_certificate = $ssl->dump_peer_certificate;
        
        unless (Fn->contains($dump_peer_certificate, "Subject Name: /C=PL/O=Net-SSLeay/OU=Test Suite/CN=simple-cert.net-ssleay.example")) {
          $success_ref->[0] = 0;
        }
        
        unless (Fn->contains($dump_peer_certificate, "Issuer  Name: /C=PL/O=Net-SSLeay/OU=Test Suite/CN=Intermediate CA")) {
          $success_ref->[0] = 0;
        }
        
        my $alpn_selected_protocol = $ssl->get0_alpn_selected_return_string;
        
        unless ($alpn_selected_protocol eq "http/1.1") {
          $success_ref->[0] = 0;
        }
        
        my $cipher = $ssl->get_cipher;
        
        unless ($cipher && !Fn->contains($cipher, "NONE")) {
          $success_ref->[0] = 0;
        }
        
        my $write_buffer = "abc";
          
        $socket->write($write_buffer);
        
        $socket->write("\0");
        
        my $string_buffer = StringBuffer->new;
        
        my $recv_buffer = (mutable string)new_string_len 1;
        
        while (1) {
          
          my $recv_length = -1;
          
          eval { $recv_length = $socket->read($recv_buffer); }
          
          if ($recv_length > 0) {
            $string_buffer->push($recv_buffer);
          }
          else {
            last;
          }
        }
        
        unless ($string_buffer->to_string eq "abc") {
          $success_ref->[0] = 0;
        }
        
        unless ($ssl->get_shutdown == SSL->SSL_RECEIVED_SHUTDOWN) {
          $success_ref->[0] = 0;
        }
        
        $socket->shutdown_SSL;
      }
      
    });
    
    Go->gosched;
    
    $wg->wait;
    
    unless ($go_server_ref->[0]) {
      return 0;
    }
    
    unless ($go_tests_ref->[0]) {
      return 0;
    }
    
    return $success_ref->[0];
  }

=pod TODO

"SSL_cipher_list", "DEFAULT !EXP !MEDIUM !LOW !eNULL !aNULL !RC4 !DES !MD5 !PSK !SRP"

"SSL_ciphersuites", "DEFAULT"

=cut

}
